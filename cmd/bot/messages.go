package main

import (
	"fmt"

	"github.com/lazy-void/primitive-bot/pkg/primitive"
	"github.com/lazy-void/primitive-bot/pkg/telegram"
)

var shapeNames = map[primitive.Shape]string{
	primitive.ShapeAny:              "–í—Å–µ",
	primitive.ShapeTriangle:         "–¢—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–∏",
	primitive.ShapeRectangle:        "–ü—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∏",
	primitive.ShapeRotatedRectangle: "–ü–æ–≤—ë—Ä–Ω—É—Ç—ã–µ –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∏",
	primitive.ShapeCircle:           "–ö—Ä—É–≥–∏",
	primitive.ShapeEllipse:          "–≠–ª–ª–∏–ø—Å—ã",
	primitive.ShapeRotatedEllipse:   "–ü–æ–≤—ë—Ä–Ω—É—Ç—ã–µ —ç–ª–ª–∏–ø—Å—ã",
	primitive.ShapePolygon:          "–ß–µ—Ç—ã—Ä—ë—Ö—É–≥–æ–ª—å–Ω–∏–∫–∏",
	primitive.ShapeBezier:           "–ö—Ä–∏–≤—ã–µ –ë–µ–∑—å–µ",
}

const (
	combo             = "–í—Å–µ"
	triangles         = "–¢—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–∏"
	rectangles        = "–ü—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∏"
	rotatedRectangles = "–ü–æ–≤—ë—Ä–Ω—É—Ç—ã–µ –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∏"
	circles           = "–ö—Ä—É–≥–∏"
	ellipses          = "–≠–ª–ª–∏–ø—Å—ã"
	rotatedEllipses   = "–ü–æ–≤—ë—Ä–Ω—É—Ç—ã–µ —ç–ª–ª–∏–ø—Å—ã"
	quadrilaterals    = "–ß–µ—Ç—ã—Ä—ë—Ö—É–≥–æ–ª—å–Ω–∏–∫–∏"
	bezierCurves      = "–ö—Ä–∏–≤—ã–µ –ë–µ–∑—å–µ"
)

const (
	helpMessage     = "–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –∫–∞–∫—É—é-–Ω–∏–±—É–¥—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é."
	errorMessage    = "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫! –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ –ø–∞—Ä—É –º–∏–Ω—É—Ç."
	enqueuedMessage = "–î–æ–±–∞–≤–∏–ª –≤ –æ—á–µ—Ä–µ–¥—å.\n–§–∏–≥—É—Ä—ã: %s\n–ò—Ç–µ—Ä–∞—Ü–∏–∏: %d\n–ü–æ–≤—Ç–æ—Ä–µ–Ω–∏—è: %d\n–ê–ª—å—Ñ–∞-–∫–∞–Ω–∞–ª: %d\n–†–∞—Å—à–∏—Ä–µ–Ω–∏–µ: %s\n–†–∞–∑–º–µ—Ä—ã: %d"
	inputMessage    = "–ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ!\n–í–≤–µ–¥–∏ —á–∏—Å–ª–æ –æ—Ç %d –¥–æ %d:"
)

const (
	rootMenuText     = "–ú–µ–Ω—é:"
	settingsMenuText = "–ù–∞—Å—Ç—Ä–æ–π–∫–∏:"
	shapesMenuText   = "–í—ã–±–µ—Ä–∏ —Ñ–∏–≥—É—Ä—ã, –∏–∑ –∫–æ—Ç–æ—Ä—ã—Ö –±—É–¥–µ—Ç –≤—ã—Å—Ç—Ä–∞–∏–≤–∞—Ç—å—Å—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:"
	iterMenuText     = "–í—ã–±–µ—Ä–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Ç–µ—Ä–∞—Ü–∏–π - —à–∞–≥–æ–≤, –Ω–∞ –∫–∞–∂–¥–æ–º –∏–∑ –∫–æ—Ç–æ—Ä—ã—Ö –±—É–¥–µ—Ç –æ—Ç—Ä–∏—Å–æ–≤—ã–≤–∞—Ç—å—Å—è —Ñ–∏–≥—É—Ä—ã:"
	repMenuText      = "–í—ã–±–µ—Ä–∏ —Å–∫–æ–ª—å–∫–æ —Ñ–∏–≥—É—Ä –±—É–¥–µ—Ç –æ—Ç—Ä–∏—Å–æ–≤—ã–≤–∞—Ç—å—Å—è –Ω–∞ –∫–∞–∂–¥–æ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏:"
	alphaMenuText    = "–í—ã–±–µ—Ä–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –∞–ª—å—Ñ–∞-–∫–∞–Ω–∞–ª–∞ –∫–∞–∂–¥–æ–π –æ—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º–æ–π —Ñ–∏–≥—É—Ä—ã:"
	extMenuText      = "–í—ã–±–µ—Ä–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞:"
	sizeMenuText     = "–í—ã–±–µ—Ä–∏ —Ä–∞–∑–º–µ—Ä –¥–ª—è –±–æ–ª—å—à–µ–π —Å—Ç–æ—Ä–æ–Ω—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (—Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ):"
)

const (
	startButtonText    = "–ù–∞—á–∞—Ç—å"
	settingsButtonText = "–ù–∞—Å—Ç—Ä–æ–π–∫–∏"
	backButtonText     = "–ù–∞–∑–∞–¥"
	shapesButtonText   = "–§–∏–≥—É—Ä—ã"
	iterButtonText     = "–ò—Ç–µ—Ä–∞—Ü–∏–∏"
	repButtonText      = "–ü–æ–≤—Ç–æ—Ä–µ–Ω–∏—è"
	alphaButtonText    = "–ê–ª—å—Ñ–∞"
	extButtonText      = "–†–∞—Å—à–∏—Ä–µ–Ω–∏–µ"
	sizeButtonText     = "–†–∞–∑–º–µ—Ä—ã"
)

var (
	rootKeyboard = telegram.InlineKeyboardMarkup{
		InlineKeyboard: [][]telegram.InlineKeyboardButton{
			{
				{Text: startButtonText, CallbackData: "/start"},
			},
			{
				{Text: shapesButtonText, CallbackData: "/settings/shape"},
				{Text: iterButtonText, CallbackData: "/settings/iter"},
			},
			{
				{Text: repButtonText, CallbackData: "/settings/rep"},
				{Text: alphaButtonText, CallbackData: "/settings/alpha"},
			},
			{
				{Text: extButtonText, CallbackData: "/settings/ext"},
				{Text: sizeButtonText, CallbackData: "/settings/size"},
			},
		},
	}

	shapesKeyboard = telegram.InlineKeyboardMarkup{
		InlineKeyboard: [][]telegram.InlineKeyboardButton{
			{{Text: shapeNames[primitive.ShapeAny], CallbackData: "/settings/shape/0"}},
			{{Text: triangles, CallbackData: "/settings/shape/1"}},
			{{Text: rectangles, CallbackData: "/settings/shape/2"}},
			{{Text: ellipses, CallbackData: "/settings/shape/3"}},
			{{Text: circles, CallbackData: "/settings/shape/4"}},
			{{Text: rotatedRectangles, CallbackData: "/settings/shape/5"}},
			{{Text: bezierCurves, CallbackData: "/settings/shape/6"}},
			{{Text: rotatedEllipses, CallbackData: "/settings/shape/7"}},
			{{Text: quadrilaterals, CallbackData: "/settings/shape/8"}},
			{{Text: backButtonText, CallbackData: "/"}},
		},
	}

	iterKeyboard = telegram.InlineKeyboardMarkup{
		InlineKeyboard: [][]telegram.InlineKeyboardButton{
			{
				{Text: "100", CallbackData: "/settings/iter/100"},
				{Text: "200", CallbackData: "/settings/iter/200"},
				{Text: "400", CallbackData: "/settings/iter/400"},
			},
			{
				{Text: "800", CallbackData: "/settings/iter/800"},
				{Text: "1000", CallbackData: "/settings/iter/1000"},
				{Text: "2000", CallbackData: "/settings/iter/2000"},
			},
			{
				{Text: "–î—Ä—É–≥–æ–µ", CallbackData: "/settings/iter/input"},
			},
			{
				{Text: backButtonText, CallbackData: "/"},
			},
		},
	}

	repKeyboard = telegram.InlineKeyboardMarkup{
		InlineKeyboard: [][]telegram.InlineKeyboardButton{
			{
				{Text: "1", CallbackData: "/settings/rep/1"},
				{Text: "2", CallbackData: "/settings/rep/2"},
				{Text: "3", CallbackData: "/settings/rep/3"},
			},
			{
				{Text: "4", CallbackData: "/settings/rep/4"},
				{Text: "5", CallbackData: "/settings/rep/5"},
				{Text: "6", CallbackData: "/settings/rep/6"},
			},
			{
				{Text: backButtonText, CallbackData: "/"},
			},
		},
	}

	alphaKeyboard = telegram.InlineKeyboardMarkup{
		InlineKeyboard: [][]telegram.InlineKeyboardButton{
			{
				{Text: "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏", CallbackData: "/settings/alpha/0"},
			},
			{
				{Text: "32", CallbackData: "/settings/alpha/32"},
				{Text: "64", CallbackData: "/settings/alpha/64"},
				{Text: "128", CallbackData: "/settings/alpha/128"},
				{Text: "255", CallbackData: "/settings/alpha/255"},
			},
			{
				{Text: "–î—Ä—É–≥–æ–µ", CallbackData: "/settings/alpha/input"},
			},
			{
				{Text: backButtonText, CallbackData: "/"},
			},
		},
	}

	extKeyboard = telegram.InlineKeyboardMarkup{
		InlineKeyboard: [][]telegram.InlineKeyboardButton{
			{
				{Text: "jpg", CallbackData: "/settings/ext/jpg"},
				{Text: "png", CallbackData: "/settings/ext/png"},
				{Text: "svg", CallbackData: "/settings/ext/svg"},
				{Text: "gif", CallbackData: "/settings/ext/gif"},
			},
			{
				{Text: backButtonText, CallbackData: "/"},
			},
		},
	}

	sizeKeyboard = telegram.InlineKeyboardMarkup{
		InlineKeyboard: [][]telegram.InlineKeyboardButton{
			{
				{Text: "256", CallbackData: "/settings/size/256"},
				{Text: "512", CallbackData: "/settings/size/512"},
				{Text: "720", CallbackData: "/settings/size/720"},
			},
			{
				{Text: "1024", CallbackData: "/settings/size/1024"},
				{Text: "1280", CallbackData: "/settings/size/1280"},
				{Text: "1920", CallbackData: "/settings/size/1920"},
			},
			{
				{Text: "–î—Ä—É–≥–æ–µ", CallbackData: "/settings/size/input"},
			},
			{
				{Text: backButtonText, CallbackData: "/"},
			},
		},
	}
)

// newKeyboardFromTemplate creates new keyboard from the template
// adding symbol to the option that is chosen at the moment
func newKeyboardFromTemplate(
	template telegram.InlineKeyboardMarkup,
	optionCallback,
	newText string,
) telegram.InlineKeyboardMarkup {
	checkSymbol := "üëâ"
	newKeyboard := telegram.InlineKeyboardMarkup{}
	newKeyboard.InlineKeyboard = make([][]telegram.InlineKeyboardButton, len(template.InlineKeyboard))
	for i, row := range template.InlineKeyboard {
		newKeyboard.InlineKeyboard[i] = make([]telegram.InlineKeyboardButton, len(row))
		for j, button := range row {
			newKeyboard.InlineKeyboard[i][j] = button

			if button.CallbackData == optionCallback {
				if newText == "" {
					newText = button.Text
				}

				newKeyboard.InlineKeyboard[i][j].Text = fmt.Sprintf("%s %s", checkSymbol, newText)
			}
		}
	}

	return newKeyboard
}
