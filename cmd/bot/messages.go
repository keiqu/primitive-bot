package main

import (
	"fmt"

	"github.com/lazy-void/primitive-bot/pkg/primitive"
	"github.com/lazy-void/primitive-bot/pkg/telegram"
)

var shapeNames = map[primitive.Shape]string{
	primitive.ShapeAny:              "–í—Å–µ",
	primitive.ShapeTriangle:         "–¢—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–∏",
	primitive.ShapeRectangle:        "–ü—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∏",
	primitive.ShapeRotatedRectangle: "–ü–æ–≤—ë—Ä–Ω—É—Ç—ã–µ –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∏",
	primitive.ShapeCircle:           "–ö—Ä—É–≥–∏",
	primitive.ShapeEllipse:          "–≠–ª–ª–∏–ø—Å—ã",
	primitive.ShapeRotatedEllipse:   "–ü–æ–≤—ë—Ä–Ω—É—Ç—ã–µ —ç–ª–ª–∏–ø—Å—ã",
	primitive.ShapePolygon:          "–ß–µ—Ç—ã—Ä—ë—Ö—É–≥–æ–ª—å–Ω–∏–∫–∏",
	primitive.ShapeBezier:           "–ö—Ä–∏–≤—ã–µ –ë–µ–∑—å–µ",
}

const (
	helpMessage            = "–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –∫–∞–∫—É—é-–Ω–∏–±—É–¥—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é."
	errorMessage           = "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫! –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ –ø–∞—Ä—É –º–∏–Ω—É—Ç."
	inputMessage           = "–ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ!\n–í–≤–µ–¥–∏ —á–∏—Å–ª–æ –æ—Ç %d –¥–æ %d:"
	statusMessage          = "%d –º–µ—Å—Ç–æ –≤ –æ—á–µ—Ä–µ–¥–∏.\n\n–§–∏–≥—É—Ä—ã: %s\n–ò—Ç–µ—Ä–∞—Ü–∏–∏: %d\n–ü–æ–≤—Ç–æ—Ä–µ–Ω–∏—è: %d\n–ê–ª—å—Ñ–∞-–∫–∞–Ω–∞–ª: %d\n–†–∞—Å—à–∏—Ä–µ–Ω–∏–µ: %s\n–†–∞–∑–º–µ—Ä—ã: %d"
	statusEmptyMessage     = "–ù–µ—Ç—É –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π."
	operationsLimitMessage = "–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –±–æ–ª—å—à–µ –æ–ø–µ—Ä–∞—Ü–∏–π –≤ –æ—á–µ—Ä–µ–¥—å."
)

const (
	rootMenuText     = "–ú–µ–Ω—é:"
	settingsMenuText = "–ù–∞—Å—Ç—Ä–æ–π–∫–∏:"
	shapesMenuText   = "–í—ã–±–µ—Ä–∏ —Ñ–∏–≥—É—Ä—ã, –∏–∑ –∫–æ—Ç–æ—Ä—ã—Ö –±—É–¥–µ—Ç –≤—ã—Å—Ç—Ä–∞–∏–≤–∞—Ç—å—Å—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:"
	iterMenuText     = "–í—ã–±–µ—Ä–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Ç–µ—Ä–∞—Ü–∏–π - —à–∞–≥–æ–≤, –Ω–∞ –∫–∞–∂–¥–æ–º –∏–∑ –∫–æ—Ç–æ—Ä—ã—Ö –±—É–¥–µ—Ç –æ—Ç—Ä–∏—Å–æ–≤—ã–≤–∞—Ç—å—Å—è —Ñ–∏–≥—É—Ä—ã:"
	repMenuText      = "–í—ã–±–µ—Ä–∏ —Å–∫–æ–ª—å–∫–æ —Ñ–∏–≥—É—Ä –±—É–¥–µ—Ç –æ—Ç—Ä–∏—Å–æ–≤—ã–≤–∞—Ç—å—Å—è –Ω–∞ –∫–∞–∂–¥–æ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏:"
	alphaMenuText    = "–í—ã–±–µ—Ä–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –∞–ª—å—Ñ–∞-–∫–∞–Ω–∞–ª–∞ –∫–∞–∂–¥–æ–π –æ—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º–æ–π —Ñ–∏–≥—É—Ä—ã:"
	extMenuText      = "–í—ã–±–µ—Ä–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞:"
	sizeMenuText     = "–í—ã–±–µ—Ä–∏ —Ä–∞–∑–º–µ—Ä –¥–ª—è –±–æ–ª—å—à–µ–π —Å—Ç–æ—Ä–æ–Ω—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (—Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ):"
)

const (
	createButtonText   = "–ù–∞—á–∞—Ç—å"
	settingsButtonText = "–ù–∞—Å—Ç—Ä–æ–π–∫–∏"
	backButtonText     = "–ù–∞–∑–∞–¥"
	shapesButtonText   = "–§–∏–≥—É—Ä—ã"
	iterButtonText     = "–ò—Ç–µ—Ä–∞—Ü–∏–∏"
	repButtonText      = "–ü–æ–≤—Ç–æ—Ä–µ–Ω–∏—è"
	alphaButtonText    = "–ê–ª—å—Ñ–∞"
	extButtonText      = "–†–∞—Å—à–∏—Ä–µ–Ω–∏–µ"
	sizeButtonText     = "–†–∞–∑–º–µ—Ä—ã"
	otherButtonText    = "–î—Ä—É–≥–æ–µ"
	autoButtonText     = "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏"
)

var (
	rootKeyboard = telegram.InlineKeyboardMarkup{
		InlineKeyboard: [][]telegram.InlineKeyboardButton{
			{
				{Text: createButtonText, CallbackData: createButtonCallback},
			},
			{
				{Text: shapesButtonText, CallbackData: shapesButtonCallback},
				{Text: iterButtonText, CallbackData: iterButtonCallback},
			},
			{
				{Text: repButtonText, CallbackData: repButtonCallback},
				{Text: alphaButtonText, CallbackData: alphaButtonCallback},
			},
			{
				{Text: extButtonText, CallbackData: extButtonCallback},
				{Text: sizeButtonText, CallbackData: sizeButtonCallback},
			},
		},
	}

	shapesKeyboard = telegram.InlineKeyboardMarkup{
		InlineKeyboard: [][]telegram.InlineKeyboardButton{
			{{Text: shapeNames[primitive.ShapeAny], CallbackData: fmt.Sprintf("%s/0", shapesButtonCallback)}},
			{{Text: shapeNames[primitive.ShapeTriangle], CallbackData: fmt.Sprintf("%s/1", shapesButtonCallback)}},
			{{Text: shapeNames[primitive.ShapeRectangle], CallbackData: fmt.Sprintf("%s/2", shapesButtonCallback)}},
			{{Text: shapeNames[primitive.ShapeEllipse], CallbackData: fmt.Sprintf("%s/3", shapesButtonCallback)}},
			{{Text: shapeNames[primitive.ShapeCircle], CallbackData: fmt.Sprintf("%s/4", shapesButtonCallback)}},
			{{Text: shapeNames[primitive.ShapeRotatedRectangle], CallbackData: fmt.Sprintf("%s/5", shapesButtonCallback)}},
			{{Text: shapeNames[primitive.ShapeBezier], CallbackData: fmt.Sprintf("%s/6", shapesButtonCallback)}},
			{{Text: shapeNames[primitive.ShapeRotatedEllipse], CallbackData: fmt.Sprintf("%s/7", shapesButtonCallback)}},
			{{Text: shapeNames[primitive.ShapePolygon], CallbackData: fmt.Sprintf("%s/8", shapesButtonCallback)}},
			{{Text: backButtonText, CallbackData: rootMenuCallback}},
		},
	}

	iterKeyboard = telegram.InlineKeyboardMarkup{
		InlineKeyboard: [][]telegram.InlineKeyboardButton{
			{
				{Text: "100", CallbackData: fmt.Sprintf("%s/100", iterButtonCallback)},
				{Text: "200", CallbackData: fmt.Sprintf("%s/200", iterButtonCallback)},
				{Text: "400", CallbackData: fmt.Sprintf("%s/400", iterButtonCallback)},
			},
			{
				{Text: "800", CallbackData: fmt.Sprintf("%s/800", iterButtonCallback)},
				{Text: "1000", CallbackData: fmt.Sprintf("%s/1000", iterButtonCallback)},
				{Text: "2000", CallbackData: fmt.Sprintf("%s/2000", iterButtonCallback)},
			},
			{
				{Text: otherButtonText, CallbackData: iterInputCallback},
			},
			{
				{Text: backButtonText, CallbackData: rootMenuCallback},
			},
		},
	}

	repKeyboard = telegram.InlineKeyboardMarkup{
		InlineKeyboard: [][]telegram.InlineKeyboardButton{
			{
				{Text: "1", CallbackData: fmt.Sprintf("%s/1", repButtonCallback)},
				{Text: "2", CallbackData: fmt.Sprintf("%s/2", repButtonCallback)},
				{Text: "3", CallbackData: fmt.Sprintf("%s/3", repButtonCallback)},
			},
			{
				{Text: "4", CallbackData: fmt.Sprintf("%s/4", repButtonCallback)},
				{Text: "5", CallbackData: fmt.Sprintf("%s/5", repButtonCallback)},
				{Text: "6", CallbackData: fmt.Sprintf("%s/6", repButtonCallback)},
			},
			{
				{Text: backButtonText, CallbackData: rootMenuCallback},
			},
		},
	}

	alphaKeyboard = telegram.InlineKeyboardMarkup{
		InlineKeyboard: [][]telegram.InlineKeyboardButton{
			{
				{Text: autoButtonText, CallbackData: fmt.Sprintf("%s/0", alphaButtonCallback)},
			},
			{
				{Text: "32", CallbackData: fmt.Sprintf("%s/32", alphaButtonCallback)},
				{Text: "64", CallbackData: fmt.Sprintf("%s/64", alphaButtonCallback)},
				{Text: "128", CallbackData: fmt.Sprintf("%s/128", alphaButtonCallback)},
				{Text: "255", CallbackData: fmt.Sprintf("%s/255", alphaButtonCallback)},
			},
			{
				{Text: otherButtonText, CallbackData: alphaInputCallback},
			},
			{
				{Text: backButtonText, CallbackData: rootMenuCallback},
			},
		},
	}

	extKeyboard = telegram.InlineKeyboardMarkup{
		InlineKeyboard: [][]telegram.InlineKeyboardButton{
			{
				{Text: "jpg", CallbackData: fmt.Sprintf("%s/jpg", extButtonCallback)},
				{Text: "png", CallbackData: fmt.Sprintf("%s/png", extButtonCallback)},
				{Text: "svg", CallbackData: fmt.Sprintf("%s/svg", extButtonCallback)},
				// gifs are disabled due to performance issues
				// {Text: "gif", CallbackData: fmt.Sprintf("%s/gif", extButtonCallback)},
			},
			{
				{Text: backButtonText, CallbackData: rootMenuCallback},
			},
		},
	}

	sizeKeyboard = telegram.InlineKeyboardMarkup{
		InlineKeyboard: [][]telegram.InlineKeyboardButton{
			{
				{Text: "256", CallbackData: fmt.Sprintf("%s/256", sizeButtonCallback)},
				{Text: "512", CallbackData: fmt.Sprintf("%s/512", sizeButtonCallback)},
				{Text: "720", CallbackData: fmt.Sprintf("%s/720", sizeButtonCallback)},
			},
			{
				{Text: "1024", CallbackData: fmt.Sprintf("%s/1024", sizeButtonCallback)},
				{Text: "1280", CallbackData: fmt.Sprintf("%s/1280", sizeButtonCallback)},
				{Text: "1920", CallbackData: fmt.Sprintf("%s/1920", sizeButtonCallback)},
			},
			{
				{Text: otherButtonText, CallbackData: sizeInputCallback},
			},
			{
				{Text: backButtonText, CallbackData: rootMenuCallback},
			},
		},
	}
)

// newKeyboardFromTemplate creates new keyboard from the template
// adding symbol to the option that is chosen at the moment
func newKeyboardFromTemplate(
	template telegram.InlineKeyboardMarkup,
	optionCallback,
	newText string,
) telegram.InlineKeyboardMarkup {
	checkSymbol := "üëâ"

	newKeyboard := telegram.InlineKeyboardMarkup{}
	newKeyboard.InlineKeyboard = make([][]telegram.InlineKeyboardButton, len(template.InlineKeyboard))
	for i, row := range template.InlineKeyboard {
		newKeyboard.InlineKeyboard[i] = make([]telegram.InlineKeyboardButton, len(row))
		for j, button := range row {
			newKeyboard.InlineKeyboard[i][j] = button

			if button.CallbackData == optionCallback {
				if newText == "" {
					newText = button.Text
				}

				newKeyboard.InlineKeyboard[i][j].Text = fmt.Sprintf("%s %s", checkSymbol, newText)
			}
		}
	}

	return newKeyboard
}
