// Code generated by running "go generate" in golang.org/x/text. DO NOT EDIT.

package main

import (
	"golang.org/x/text/language"
	"golang.org/x/text/message"
	"golang.org/x/text/message/catalog"
)

type dictionary struct {
	index []uint32
	data  string
}

func (d *dictionary) Lookup(key string) (data string, ok bool) {
	p, ok := messageKeyToIndex[key]
	if !ok {
		return "", false
	}
	start, end := d.index[p], d.index[p+1]
	if start == end {
		return "", false
	}
	return d.data[start:end], true
}

func init() {
	dict := map[string]catalog.Dictionary{
		"en": &dictionary{index: enIndex, data: enData},
		"ru": &dictionary{index: ruIndex, data: ruData},
	}
	fallback := language.MustParse("en-US")
	cat, err := catalog.NewFromMap(dict, catalog.Fallback(fallback))
	if err != nil {
		panic(err)
	}
	message.DefaultCatalog = cat
}

var messageKeyToIndex = map[string]int{
	"%d place in the queue.\n\nShapes: %s\nSteps: %d\nRepetitions: %d\nAlpha-channel: %d\nExtension: %s\nSize: %#v": 2,
	"All":                               6,
	"Alpha":                             20,
	"Auto":                              23,
	"Back":                              16,
	"Bezier Curves":                     14,
	"Circles":                           10,
	"Create":                            15,
	"Ellipses":                          11,
	"Enter number between %#v and %#v:": 3,
	"Extension":                         21,
	"Incorrect value!\nEnter number between %#v and %#v:": 4,
	"Menu:":              25,
	"Other":              24,
	"Quadrilaterals":     13,
	"Rectangles":         8,
	"Repetitions":        19,
	"Rotated Ellipses":   12,
	"Rotated Rectangles": 9,
	"Select a size for the larger side of the resulting image (the aspect ratio will be preserved):": 31,
	"Select an alpha-channel value for the shapes:":                                                  29,
	"Select an extension of the resulting image:":                                                    30,
	"Select the number of shapes to draw in each step:":                                              28,
	"Select the number of steps. Shapes will be drawn at each step:":                                 27,
	"Select the shapes to be used to create the image:":                                              26,
	"Send me some image.": 5,
	"Shapes":              17,
	"Size":                22,
	"Something gone wrong! Please, try again in a few minutes.": 1,
	"Steps":     18,
	"Triangles": 7,
	"You can't add more operations to the queue.": 0,
}

var enIndex = []uint32{ // 33 elements
	// Entry 0 - 1F
	0x00000000, 0x0000002c, 0x00000066, 0x000000e2,
	0x0000010a, 0x00000143, 0x00000157, 0x0000015b,
	0x00000165, 0x00000170, 0x00000183, 0x0000018b,
	0x00000194, 0x000001a5, 0x000001b4, 0x000001c2,
	0x000001c9, 0x000001ce, 0x000001d5, 0x000001db,
	0x000001e7, 0x000001ed, 0x000001f7, 0x000001fc,
	0x00000201, 0x00000207, 0x0000020d, 0x0000023f,
	0x0000027e, 0x000002b0, 0x000002de, 0x0000030a,
	// Entry 20 - 3F
	0x00000369,
} // Size: 156 bytes

const enData string = "" + // Size: 873 bytes
	"\x02You can't add more operations to the queue.\x02Something gone wrong!" +
	" Please, try again in a few minutes.\x02%[1]d place in the queue.\x0a" +
	"\x0aShapes: %[2]s\x0aSteps: %[3]d\x0aRepetitions: %[4]d\x0aAlpha-channel" +
	": %[5]d\x0aExtension: %[6]s\x0aSize: %#[7]v\x02Enter number between %#[1" +
	"]v and %#[2]v:\x02Incorrect value!\x0aEnter number between %#[1]v and %#" +
	"[2]v:\x02Send me some image.\x02All\x02Triangles\x02Rectangles\x02Rotate" +
	"d Rectangles\x02Circles\x02Ellipses\x02Rotated Ellipses\x02Quadrilateral" +
	"s\x02Bezier Curves\x02Create\x02Back\x02Shapes\x02Steps\x02Repetitions" +
	"\x02Alpha\x02Extension\x02Size\x02Auto\x02Other\x02Menu:\x02Select the s" +
	"hapes to be used to create the image:\x02Select the number of steps. Sha" +
	"pes will be drawn at each step:\x02Select the number of shapes to draw i" +
	"n each step:\x02Select an alpha-channel value for the shapes:\x02Select " +
	"an extension of the resulting image:\x02Select a size for the larger sid" +
	"e of the resulting image (the aspect ratio will be preserved):"

var ruIndex = []uint32{ // 33 elements
	// Entry 0 - 1F
	0x00000000, 0x00000059, 0x000000b9, 0x0000016e,
	0x0000019d, 0x000001ef, 0x00000235, 0x0000023c,
	0x00000255, 0x00000272, 0x000002a4, 0x000002af,
	0x000002be, 0x000002e2, 0x00000303, 0x0000031b,
	0x0000032a, 0x00000335, 0x00000342, 0x0000034b,
	0x00000360, 0x0000036b, 0x00000380, 0x0000038f,
	0x000003aa, 0x000003b7, 0x000003c1, 0x0000042e,
	0x000004ad, 0x00000520, 0x00000569, 0x000005be,
	// Entry 20 - 3F
	0x0000066d,
} // Size: 156 bytes

const ruData string = "" + // Size: 1645 bytes
	"\x02Ты не можешь добавить больше операций в очередь.\x02Что-то пошло не " +
	"так! Попробуй снова через пару минут.\x02%[1]d место в очереди.\x0a\x0a" +
	"Фигуры: %[2]s\x0aШаги: %[3]d\x0aПовторения: %[4]d\x0aАльфа-канал: %[5]d" +
	"\x0aРасширение: %[6]s\x0aРазмеры: %#[7]v\x02Введи число от %#[1]v до %#[" +
	"2]v:\x02Неверное значение!\x0aВведи число от %#[1]v до %#[2]v:\x02Отправ" +
	"ь мне какое-нибудь изображение.\x02Все\x02Треугольники\x02Прямоугольник" +
	"и\x02Повёрнутые прямоугольники\x02Круги\x02Эллипсы\x02Повёрнутые эллипс" +
	"ы\x02Четырёхугольники\x02Кривые Безье\x02Создать\x02Назад\x02Фигуры\x02" +
	"Шаги\x02Повторения\x02Альфа\x02Расширение\x02Размеры\x02Автоматически" +
	"\x02Другое\x02Меню:\x02Выбери фигуры, из которых будет выстраиваться изо" +
	"бражение:\x02Выбери количество шагов. На каждом шаге будут отрисовывать" +
	"ся фигуры:\x02Выбери сколько фигур будет отрисовываться на каждой итера" +
	"ции:\x02Выбери значение альфа-канала для фигур:\x02Выбери расширение по" +
	"лучившегося изображения:\x02Выбери размер большей стороны получившегося" +
	" изображения (соотношение сторон будет сохранено):"

	// Total table size 2830 bytes (2KiB); checksum: E19234CB
